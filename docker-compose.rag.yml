version: '3.8'

services:
  # Main RAG-Enhanced Email Agent
  email-agent-rag:
    build:
      context: .
      dockerfile: Dockerfile.rag
    ports:
      - "8600:8600"
    environment:
      - PYTHONPATH=/app
      - DATA_DIR=/app/data
      - VECTORSTORE_DIR=/app/data/vectorstore
      - LOG_LEVEL=INFO
      # OpenAI API key (set via .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
    volumes:
      # Persistent storage for vector database and encrypted data
      - email_data:/app/data
      - vector_store:/app/data/vectorstore
      # Gmail credentials (mounted read-only)
      - ./credentials.json:/app/credentials.json:ro
      - ./token.json:/app/token.json:ro
    depends_on:
      - chroma-db
    networks:
      - rag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8600/api/stats"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Standalone ChromaDB instance (optional for scaling)
  chroma-db:
    image: chromadb/chroma:latest
    ports:
      - "8000:8000"
    environment:
      - CHROMA_DB_IMPL=clickhouse
      - PERSIST_DIRECTORY=/chroma/chroma
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - rag-network
    restart: unless-stopped
    command: ["uvicorn", "chromadb.app:app", "--host", "0.0.0.0", "--port", "8000"]

  # Background indexing service
  indexer-service:
    build:
      context: .
      dockerfile: Dockerfile.rag
    environment:
      - PYTHONPATH=/app
      - DATA_DIR=/app/data
      - VECTORSTORE_DIR=/app/data/vectorstore
      - INDEXING_SCHEDULE=*/30 * * * *  # Every 30 minutes
    volumes:
      - email_data:/app/data
      - vector_store:/app/data/vectorstore
    depends_on:
      - chroma-db
    networks:
      - rag-network
    restart: unless-stopped
    command: ["python", "-c", "
      import asyncio
      from knowledge_indexer import schedule_periodic_indexing
      asyncio.run(schedule_periodic_indexing())
    "]

  # Optional: Monitoring and metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - rag-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - rag-network
    restart: unless-stopped

volumes:
  email_data:
    driver: local
  vector_store:
    driver: local
  chroma_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  rag-network:
    driver: bridge